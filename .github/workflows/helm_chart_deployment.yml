name: k8s pipeline deployment
on:
  push:
    # paths:
    #   - '.env'
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      KUBECONFI: ${{ secrets.KUBECONFIG }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Get PORT value and write Dockerfile
        run: |
          PORT=$(cat .env | grep PORT | cut -d '=' -f2)
          echo "PORT=$PORT" >> $GITHUB_ENV

      - name: Run write_dockerfile.sh script
        run: |
          cd bash_scripts && chmod 777 write_dockerfile.sh
          ./write_dockerfile.sh ${{ env.PORT }}
        env:
          PORT: ${{ env.PORT }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: tengen-tetris
          file: tengen-tetris/Dockerfile
          push: true
          tags: milunadev/tetrischallenge:latest
      
      - name: Update values.yaml with new port. HELM CHART
        run: |
          cd bash_scripts && chmod 777 write_values_helm.sh
          ./write_values_helm.sh ${{ env.PORT }}

      - name: Install Helm
        uses: azure/setup-helm@v1
      
      - name: Configure Kubeconfig
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
      
      - name: Test Kubernetes cluster access
        run: kubectl get all
      
      - name: Deploy or Update Helm chart
        run: |
          # Intenta el despliegue o actualización con Helm
          set +e  # Desactiva la detección de errores para manejar los errores manualmente
          helm upgrade --install --atomic my-tetris ./tetris-mluna-chart \
            --set image.tag=latest \
            --namespace challenger-006
          HELM_UPGRADE_EXIT_CODE=$?
          set -e  # Reactiva la detección de errores

          # Si el comando de Helm falla con un error que no sea de 'release no encontrada'
          if [ $HELM_UPGRADE_EXIT_CODE -ne 0 ] && [ $HELM_UPGRADE_EXIT_CODE -ne 1 ]; then
            echo "Error in Helm upgrade --install command. Exit code: $HELM_UPGRADE_EXIT_CODE"
            exit $HELM_UPGRADE_EXIT_CODE
          fi

          # Si Helm falla porque no hay un release previo, trata de instalar de nuevo
          if [ $HELM_UPGRADE_EXIT_CODE -eq 1 ]; then
            echo "Helm release not found. Attempting to install..."
            helm install my-tetris ./tetris-mluna-chart \
              --set image.tag=latest \
              --namespace challenger-006
          fi
